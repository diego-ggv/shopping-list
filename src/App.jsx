import {initializeApp} from 'https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js'
import {
  getDatabase,
  ref,
  push,
  onValue, 
  remove,
} from 'https://www.gstatic.com/firebasejs/9.15.0/firebase-database.js'
import {useEffect, useState} from 'react'
import Item from './components/item.jsx';
import './css/App.css'

/*
 Todo: 
   - CHANGE the useEffect to run every time the database is updated.
   - ADD buttons that add or subtract how of each item to get.
   - ADD a check box to each li item and when checked cross the li items
     from the lis.
   - ADD a button that removes all items from the list.
   - fix bug on mobile devices, styles don't seem to apply

 */



function App() {
  //  State
  //=======
  const [itemList, setItemList] = useState([])  
  const [currentItem, setCurrentItem] = useState('')
  
  //  Firebase 
  //==========
  const appSettings = {
    databaseURL: 'https://playground-e9327-default-rtdb.firebaseio.com/'
  }
  const app = initializeApp(appSettings)
  const database = getDatabase(app)
  const shoppingCartDB = ref(database, 'shoppingList')

  useEffect(() => {
    onValue(shoppingCartDB, (snapshot) => {
      if (snapshot.exists()){
        const listArray = Object.entries(snapshot.val())
        setItemList(listArray)
      }
    })
  }, [])


  //  Functions
  //===========
  /*
     newItem() is triggered when the user types in a new item 
     in the input field. It sets the currentItem state to an object 
     that contains a unique id generated using the nanoid() function 
     and the name of the item that was entered by the user.
   */
  function newItem(e) {
    setCurrentItem(e.target.value)
  }

  /* 
    addItem() is called when the user clicks on the "Add Item" button. 
    If the name of the currentItem is not an empty string, it adds 
    the item to the shoppingCartDB and updates the itemList and 
    currentItem states accordingly. 
  */
  function addItem() {
    if (currentItem !== '') {
      push(shoppingCartDB, currentItem)
      setCurrentItem('')
    }
  }

  /*
    removeItem(id) is called when the user clicks on the "Remove" 
    button for an item. It removes the item from the itemList state 
    and deletes it from the shoppingList database by creating a 
    reference to the item using its id and calling the remove() function.
  */
  function removeItem(id) {
    setItemList(prevState => prevState.filter(item => item[0] !== id ))
    const itemRef = ref(database, `shoppingList/${id}`)
    remove(itemRef)
  }

  /*
   allItems contains an array of JSX elements generated by mapping
   through the itemList state. It uses the Item component to render 
   each item in the list, passing the key, id, name, and remove props.
   */
  let allItems = itemList.map(item =>
      <Item
          key={item[0]}
          id={item[0]}
          item={item[1]}
          remove={removeItem}
      />,
  )  
  console.log(allItems)

  const handleSubmit = (event) => {
    event.preventDefault();
    addItem()
  }
  
  // HTML
  //=====
  return (
      <div className="App">
        <h1 className="title">Shopping List</h1>

        <div className="container">
          <form onSubmit={(e) => handleSubmit(e)}>
            <input
              className="input--field"
              placeholder="add item to the list"
              name="input"
              value={currentItem}
              onChange={(e) => newItem(e)}
            />
          </form>
          <i className="fa-solid fa-cart-shopping fa-lg icon"></i>
        </div>

        {
          allItems.length !== 0 ? 
              <ul className="item--list">{allItems}</ul> 
              : 
              <p className="item--list-empty">
                Not items yet... <br/>
                add some stuff to the list!
              </p>
        }

        <button
            className="button--add"
            onClick={addItem}
        >
          Add Item
        </button>

      </div>
  )
}

export default App
